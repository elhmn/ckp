// Code generated by MockGen. DO NOT EDIT.
// Source: internal/printers/printers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	store "github.com/elhmn/ckp/internal/store"
	gomock "github.com/golang/mock/gomock"
)

// MockIPrinters is a mock of IPrinters interface.
type MockIPrinters struct {
	ctrl     *gomock.Controller
	recorder *MockIPrintersMockRecorder
}

// MockIPrintersMockRecorder is the mock recorder for MockIPrinters.
type MockIPrintersMockRecorder struct {
	mock *MockIPrinters
}

// NewMockIPrinters creates a new mock instance.
func NewMockIPrinters(ctrl *gomock.Controller) *MockIPrinters {
	mock := &MockIPrinters{ctrl: ctrl}
	mock.recorder = &MockIPrintersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPrinters) EXPECT() *MockIPrintersMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockIPrinters) Confirm(message string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockIPrintersMockRecorder) Confirm(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockIPrinters)(nil).Confirm), message)
}

// SelectScriptEntry mocks base method.
func (m *MockIPrinters) SelectScriptEntry(scripts []store.Script, entryType string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectScriptEntry", scripts, entryType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectScriptEntry indicates an expected call of SelectScriptEntry.
func (mr *MockIPrintersMockRecorder) SelectScriptEntry(scripts, entryType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectScriptEntry", reflect.TypeOf((*MockIPrinters)(nil).SelectScriptEntry), scripts, entryType)
}
